class LazyUser(object):
    def __get__(self, request, obj_type=None):
        if not hasattr(request, '_cached_user') :
            from . import get_user
            request._cached_user = get_user(request)
        return request._cached_user

class AuthenticationMiddleware(object):
    def __init__(self) :
        self._setcookie = False

    def process_request(self, request):
        self._setcookie = False
        request.__class__.user = LazyUser()
        request._authMiddleware = self
        return None

    def process_response(self, request, response):
        if self._setcookie :
            exp    = None
            domain = None

            if 'expires' in self._setcookie :
                exp = self._setcookie['expires'].strftime('%a, %d %b %Y %H:%M:%S')
            if 'domain' in self._setcookie :
                domain = self._setcookie['domain']

            response.set_cookie(self._setcookie['cookie'], self._setcookie['value'], expires=exp, domain=domain)
            self._setcookie = None

        return response

    def set_cookie(self, fields) :
        self._setcookie = fields
